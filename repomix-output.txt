This file is a merged representation of a subset of the codebase, containing specifically included files, combined into a single document by Repomix.

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: server/app/schemas.py, server/app/models.py
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)

Additional Info:
----------------

================================================================
Directory Structure
================================================================
server/app/models.py
server/app/schemas.py

================================================================
Files
================================================================

================
File: server/app/models.py
================
from sqlalchemy import Column, Integer, String, Boolean, Text
from app.database import Base


class Tool(Base):
    __tablename__ = "tools"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, nullable=False)
    description = Column(Text, nullable=False)
    categories = Column(String, nullable=False)
    url = Column(String, nullable=False, unique=True)
    approved = Column(Boolean, default=False)

    # New Fields
    pricing = Column(String, nullable=False)  # e.g., "Free", "Premium", "Freemium"
    problem_it_solves = Column(Text, nullable=False)
    key_features = Column(Text, nullable=False)
    requires_account = Column(Boolean, default=False)

    # Auto-generated blog fields
    blog_title = Column(String, nullable=True)
    blog_content = Column(Text, nullable=True)


class Admin(Base):
    __tablename__ = "admins"

    id = Column(Integer, primary_key=True, index=True)
    username = Column(String(50), nullable=False, unique=True)
    hashed_password = Column(String(255), nullable=False)
    is_superuser = Column(Boolean, default=False)
    is_approved = Column(Boolean, default=False)

================
File: server/app/schemas.py
================
from pydantic import BaseModel
from typing import Optional
from pydantic import BaseModel


# Tool Models
class ToolBase(BaseModel):
    name: str
    description: str
    categories: str
    url: str
    pricing: str  # e.g., "Free", "Premium", "Freemium"
    problem_it_solves: str
    key_features: str
    requires_account: bool


class ToolCreate(ToolBase):
    pass


class ToolResponse(ToolBase):
    id: int
    approved: bool
    blog_title: Optional[str] = None
    blog_content: Optional[str] = None

    class Config:
        from_attributes = True


# Admin Models
class AdminCreate(BaseModel):
    username: str
    password: str


class AdminResponse(BaseModel):
    id: int
    username: str
    is_superuser: bool
    is_approved: bool


class Token(BaseModel):
    access_token: str
    token_type: str
    admin: AdminResponse  # Include admin details in response


class AdminOut(BaseModel):
    id: int
    username: str

    class Config:
        from_attributes = True



================================================================
End of Codebase
================================================================
